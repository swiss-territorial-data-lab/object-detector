prepare_data.py:
  datasets:
    lakes_shapefile: https://ge.ch/sitg/geodata/SITG/OPENDATA/3951/SHP_GEO_LAC_LEMAN.zip
    parcels_shapefile: https://ge.ch/sitg/geodata/SITG/OPENDATA/8450/SHP_CAD_PARCELLE_MENSU.zip
    swimmingpools_shapefile: https://ge.ch/sitg/geodata/SITG/OPENDATA/1836/SHP_CAD_PISCINE.zip
    OK_z18_tile_IDs_csv: data/OK_z18_tile_IDs.csv
  output_folder: output_GE

generate_tilesets.py:
  debug_mode: False
  working_directory: examples/swimming-pool-detection/GE
  datasets:
    aoi_tiles_geojson: output_GE/aoi_z18_tiles.geojson
    ground_truth_labels_geojson: output_GE/ground_truth_labels.geojson
    other_labels_geojson: output_GE/other_labels.geojson
    orthophotos_web_service:
      type: MIL # supported values: 1. MIL = Map Image Layer 2. WMS
      url: https://ge.ch/sitgags2/rest/services/RASTER/ORTHOPHOTOS_2018/MapServer
      srs: "EPSG:3857"
  output_folder: output_GE
  tile_size: 256 # per side, in pixels
  overwrite: False
  n_jobs: 10
  COCO_metadata:
    year: 2020
    version: 1.0
    description: 2018 orthophotos w/ Swimming Pool segmentations
    contributor: Système d'information du territoire à Genève (SITG)
    url: https://ge.ch/sitg
    license:
      name: Open Data
      url: https://ge.ch/sitg/media/sitg/files/documents/conditions_generales_dutilisation_des_donnees_et_produits_du_sitg_en_libre_acces.pdf

train_model.py:
  debug_mode: False
  working_directory: output_GE
  log_subfolder: logs
  sample_tagged_img_subfolder: sample_training_images
  COCO_files: # relative paths, w/ respect to the working_folder
      trn: COCO_trn.json
      val: COCO_val.json
      tst: COCO_tst.json
  detectron2_config_file: '../detectron2_config_GE.yaml' # path relative to the working_folder
  model_weights:
      model_zoo_checkpoint_url: "COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml"
      
make_detections.py:
  working_directory: output_GE
  log_subfolder: logs
  sample_tagged_img_subfolder: sample_detection_images
  COCO_files: # relative paths, w/ respect to the working_folder
      trn: COCO_trn.json
      val: COCO_val.json
      tst: COCO_tst.json
      oth: COCO_oth.json
  detectron2_config_file: '../detectron2_config_GE.yaml' # path relative to the working_folder
  model_weights:
      pth_file: 'logs/model_final.pth'
  image_metadata_json: img_metadata.json
  rdp_simplification: # rdp = Ramer-Douglas-Peucker
    enabled: true
    epsilon: 0.5 # cf. https://rdp.readthedocs.io/en/latest/
  score_lower_threshold: 0.05

assess_detections.py:
  working_directory: output_GE
  datasets:
    ground_truth_labels_geojson: ground_truth_labels.geojson
    other_labels_geojson: other_labels.geojson
    split_aoi_tiles_geojson: split_aoi_tiles.geojson # aoi = Area of Interest
    detections:
      trn: trn_detections_at_0dot05_threshold.gpkg
      val: val_detections_at_0dot05_threshold.gpkg
      tst: tst_detections_at_0dot05_threshold.gpkg
      oth: oth_detections_at_0dot05_threshold.gpkg
  output_folder: .
